---
  - name: Create new user and (optionally) create database.
    hosts: all
    gather_facts: false

    tasks:
      - name: fetch rds info
        rds_instance_info:
          db_instance_identifier: "{{ db_instance_identifier }}"
        register:
          rds_instance

      - name: set rds endpoint
        set_fact:
          db_host: "{{ item.address }}"
          db_port: "{{ item.port }}"
        loop: "{{ rds_instance.instances|map(attribute='endpoint')|list }}"

      - name: assert that rds instance can be found using incoming identifier
        assert:
          that:
            - db_host is defined
          fail_msg: "RDS instance {{ db_instance_identifier }} not found."
          quiet: true

      - name: create database (only when 'db_name' is defined)
        postgresql_db:
          login_host: "{{ db_host }}"
          login_port: "{{ db_port|default(5432) }}"
          login_user: "{{ db_admin_user }}"
          login_password: "{{ db_admin_password }}"
          encoding: "UTF8"
          name: "{{ db_name }}"
          state: present
        when: db_name is defined

      - name: create new database user
        postgresql_user:
          login_host: "{{ db_host }}"
          login_port: "{{ db_port|default(5432) }}"
          login_user: "{{ db_admin_user }}"
          login_password: "{{ db_admin_password }}"
          login_db: "postgres"
          name: "{{ new_db_user }}"
          password: "{{ new_db_user_password }}"
          no_password_changes: yes
          state: present
        register: out_pg_user

      - debug:
          var: out_pg_user

      - name: grant database owner public schema privileges      
        postgresql_privs:
          login_host: "{{ db_host }}"
          login_port: "{{ db_port|default(5432) }}"
          login_user: "{{ db_admin_user }}"
          login_password: "{{ db_admin_password }}"
          database: "{{ db_name|default('postgres') }}"
          obj: public
          type: schema
          privs: ALL
          roles: "{{ new_db_user }}"
          state: present
          
      - name: grant all privileges on database to owner
        postgresql_privs:
          login_host: "{{ db_host }}"
          login_port: "{{ db_port|default(5432) }}"
          login_user: "{{ db_admin_user }}"
          login_password: "{{ db_admin_password }}"
          database: "{{ db_name }}"
          state: present
          privs: ALL
          type: database
          role: "{{ new_db_user }}"
        when: db_name is defined
